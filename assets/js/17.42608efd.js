(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{285:function(t,s,a){"use strict";a.r(s);var e=a(13),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),s("p",[t._v("提供可预测的状态管理")]),t._v(" "),s("p",[t._v("redux 与 react 没有任何的关系，在 react 中需要使用 redux，则需要安装绑定库：react-redux。")]),t._v(" "),s("p",[t._v("redux 采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。")]),t._v(" "),s("p",[t._v("Redux 在以下情况下更有用：")]),t._v(" "),s("ul",[s("li",[t._v("在应用的大量地方，都存在大量的状态")]),t._v(" "),s("li",[t._v("应用状态会随着时间的推移而频繁更新")]),t._v(" "),s("li",[t._v("更新该状态的逻辑可能很复杂")]),t._v(" "),s("li",[t._v("中型和大型代码量的应用，很多人协同开发")])]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("ul",[s("li",[t._v("store - 仓库，集中式管理存储应用中各组件共享状态的地方")]),t._v(" "),s("li",[t._v("state - 各组件需要共享的“状态”")]),t._v(" "),s("li",[t._v("action - 是一个普通对象，通常用于描述发生了什么事情。一般在 action 对象中有两个属性：{ type, payload }，type 表明动作类型，payload 表示有效载荷")]),t._v(" "),s("li",[t._v("action creator：action 创建函数，主要用于生成 action 对象，让你不必每次都手动编写 action 对象")]),t._v(" "),s("li",[t._v("reducer：是一个"),s("strong",[t._v("纯函数")]),t._v("，主要用于同步更新状态数据，这个函数会传递 state 和 action 作为参数，返回新的 state 对象")])]),t._v(" "),s("blockquote",[s("p",[t._v("Reducer 必需符合以下规则：")]),t._v(" "),s("ul",[s("li",[t._v("仅使用 "),s("code",[t._v("state")]),t._v(" 和 "),s("code",[t._v("action")]),t._v(" 参数计算新的状态值")]),t._v(" "),s("li",[t._v("禁止直接修改 "),s("code",[t._v("state")]),t._v("。必须通过复制现有的 "),s("code",[t._v("state")]),t._v(" 并对复制的值进行更改的方式来做 "),s("em",[t._v("不可变更新（immutable updates）")]),t._v("。")]),t._v(" "),s("li",[t._v("禁止任何异步逻辑、依赖随机值或导致其他“副作用”的代码")])])]),t._v(" "),s("blockquote",[s("p",[t._v("reducer 函数内部的逻辑通常遵循以下步骤：")]),t._v(" "),s("ul",[s("li",[t._v("检查 reducer 是否关心这个 action")]),t._v(" "),s("li",[t._v("如果是，则复制 state，使用新值更新 state 副本，然后返回新 state")]),t._v(" "),s("li",[t._v("否则，返回原来的 state 不变")])])]),t._v(" "),s("ul",[s("li",[t._v("dispatch：reducer() 不能直接调用。dispatch(action) 用于触发 action 调用，在内部实现对 reducer() 的调用。"),s("strong",[t._v("更新 state 的唯一方法是调用 "),s("strong",[s("code",[t._v("**store.dispatch()**")])]),t._v(" 并传入一个 action 对象")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"三大原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三大原则"}},[t._v("#")]),t._v(" 三大原则")]),t._v(" "),s("h3",{attrs:{id:"单一数据源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源"}},[t._v("#")]),t._v(" 单一数据源")]),t._v(" "),s("p",[s("strong",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。")])]),t._v(" "),s("h3",{attrs:{id:"state-是只读的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-是只读的"}},[t._v("#")]),t._v(" State 是只读的")]),t._v(" "),s("p",[s("strong",[t._v("唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")])]),t._v(" "),s("h3",{attrs:{id:"使用纯函数来执行修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改"}},[t._v("#")]),t._v(" 使用纯函数来执行修改")]),t._v(" "),s("p",[s("strong",[t._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。")])]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i redux react-redux\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" redux react-redux\n")])])]),s("h3",{attrs:{id:"创建-reducer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-reducer"}},[t._v("#")]),t._v(" 创建 reducer")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./reducers/counter.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DECREMENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INCREMENT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"../actions/constants"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * state 初始值\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" initialState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计数数量的状态数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * reducer 纯函数，用于实现状态的同步更新，返回更新后的新状态数据\n * @param {*} state 更新前的状态数据 \n * @param {*} action 描述发生了什么，有 type 与 payload 属性\n * @returns \n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reducer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payload "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INCREMENT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加数量")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" copy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制 state 值，实际应该进行深克隆")]),t._v("\n      copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("num "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对复制后的副本进行更新")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" copy "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回更新后的新状态数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" reducer\n")])])]),s("p",[t._v("reducer() 是一个纯函数，传递 state 与 action 作为参数，返回新的 state。在函数体内部不能直接更新参数 state，而应该对参数 state 进行深克隆，然后更新克隆后的副本。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./reducers/index.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" combineReducers "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" counter "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./counter'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将多个独立的 reducer 最终合并为一个根 reducer")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("combineReducers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  counter\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("将各独立的 reducer 合并为一个根 reducer")]),t._v(" "),s("h2",{attrs:{id:"action-处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#action-处理"}},[t._v("#")]),t._v(" Action 处理")]),t._v(" "),s("p",[t._v("现在我们已经确定了 state 对象的结构，就可以开始开发 reducer。reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。")]),t._v(" "),s("h3",{attrs:{id:"定义-action-creator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义-action-creator"}},[t._v("#")]),t._v(" 定义 action creator")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./actions/counter.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * action creator，action创建函数，主要用于生成 action 对象\n * @returns \n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("incrementActionCreator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INCREMENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("payload")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("num")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("action creator 主要用于创建 action，以便实现 action 复用时少写代码")]),t._v(" "),s("h3",{attrs:{id:"创建-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建-store"}},[t._v("#")]),t._v(" 创建 Store")]),t._v(" "),s("p",[s("strong",[t._v("Store")]),t._v(" 就是把它们联系到一起的对象。Store 有以下职责：")]),t._v(" "),s("ul",[s("li",[t._v("维持应用的 state；")]),t._v(" "),s("li",[t._v("提供 "),s("code",[t._v("[getState()](https://www.redux.org.cn/docs/api/Store.html#getState)")]),t._v(" 方法获取 state；")]),t._v(" "),s("li",[t._v("提供 "),s("code",[t._v("[dispatch(action)](https://www.redux.org.cn/docs/api/Store.html#dispatch)")]),t._v(" 方法更新 state；")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("[subscribe(listener)](https://www.redux.org.cn/docs/api/Store.html#subscribe)")]),t._v(" 注册监听器;")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("[subscribe(listener)](https://www.redux.org.cn/docs/api/Store.html#subscribe)")]),t._v(" 返回的函数注销监听器。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./store/index.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createStore "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" rootReducer "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../reducers'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 Store 对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rootReducer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("调用 createStore() 并传递根 reducer 作为参数，创建 Store 仓库对象")]),t._v(" "),s("h3",{attrs:{id:"利用绑定库的-provider-保存-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用绑定库的-provider-保存-store"}},[t._v("#")]),t._v(" 利用绑定库的 Provider 保存 store")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./src/index.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Provider "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-redux'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./store'")]),t._v("\nReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Provider store"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Provider"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("通常在 src/index.js 中引入绑定库的 Provider 与 redux 创建的 store，利用 Provider 组件包裹应用中的组件，在 Provider 中使用 store 属性保存 redux 的 Store，这样，在 Provider 组件的后代组件中，就可以去连接并使用 redux 的 store 了。")]),t._v(" "),s("h3",{attrs:{id:"组件中连接-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件中连接-store"}},[t._v("#")]),t._v(" 组件中连接 store")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ./App.jsx")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" connect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-redux'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 将 store 中 state 的数据映射到组件的属性中\n * mapStateToProps 是一个函数，会传递 store 中的 state 作为参数。\n * 返回一个普通对象，该对象会被合并到组件的 props 中\n * @param {*} state \n * @returns \n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapStateToProps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 将更新状态数据的动作映射到组件的属性中\n * mapDispatchToProps 是一个函数，会传递 dispatch 作为参数。\n * 返回一个对象，返回对象中的各字段应该是函数（方法），返回\n * 对象中的各字段也会被合并到组件的 props 中。\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapDispatchToProps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dispatch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("plus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incrementActionCreator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("minus")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("decrementActionCreator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 调用 connect() 函数，在 React 组件中，连接 redux 的 store */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hoc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mapDispatchToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hoc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("绑定库中的 connect() 方法主要用于在组件中连接 redux 的 store，传递 mapStateToProps 和 mapDispatchToProps 作为参数：两个参数都是函数的结构，函数中返回的对象会被合并到包裹的组件 props 属性中。")]),t._v(" "),s("p",[t._v("connect() 返回值是一个函数包裹器（HOC），调用该包裹器函数并传递组件参数，可以实现将  mapStateToProps 和 mapDispatchToProps 返回值的对象各属性合并注入到组件的操作。")]),t._v(" "),s("h1",{attrs:{id:"理解redux-自己"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解redux-自己"}},[t._v("#")]),t._v(" 理解redux（自己）")]),t._v(" "),s("ul",[s("li",[t._v("store：推送数据的仓库")]),t._v(" "),s("li",[t._v("reducer：帮助 store 处理数据的方法（初始化、修改、删除）")]),t._v(" "),s("li",[t._v("actions：数据更新的指令")]),t._v(" "),s("li",[t._v("react 组件（UI）：订阅 store 中的数据")])]),t._v(" "),s("p",[t._v("connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {")]),t._v(" "),s("h2",{attrs:{id:"redux-三大原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redux-三大原则"}},[t._v("#")]),t._v(" redux 三大原则：")]),t._v(" "),s("ul",[s("li",[t._v("单一数据源：整个应用的 state 存放在唯一的一个 store 中。"),s("code",[t._v("store.getState()")])]),t._v(" "),s("li",[t._v("state 是只读的，唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")])]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("store.dispatch(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'COMPLETE_TODO'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("使用纯函数来执行修改（reducer：接收先前的 state 和 action，并返回新的 state）")])]),t._v(" "),s("p",[t._v("纯函数：1、相同的输入总是会返回相同的输出，2、不会产生任何副作用、3、不依赖于外部状态")]),t._v(" "),s("h2",{attrs:{id:"react-redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" react-redux")]),t._v(" "),s("p",[s("code",[t._v("React-Redux")]),t._v(" 将所有组 件分成两大类："),s("code",[t._v("UI")]),t._v(" 组件和容器组件。"),s("code",[t._v("UI")]),t._v(" 组件负责 "),s("code",[t._v("UI")]),t._v(" 的呈现，容器组件负责管理数据和逻辑。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("UI")]),t._v(" 组件：只负责 UI 的呈现，不带有任何业务逻辑；没有状态（即不使用 "),s("code",[t._v("this.state")]),t._v(" 这个变量）；所有数据都由参数 "),s("code",[t._v("this.props")]),t._v(" 提供；不使用任何 "),s("code",[t._v("Redux")]),t._v(" 的 "),s("code",[t._v("API")])]),t._v(" "),s("li",[t._v("容器组件：负责管理数据和业务逻辑，不负责 "),s("code",[t._v("UI")]),t._v(" 的呈现；带有内部状态；使用 "),s("code",[t._v("Redux")]),t._v(" 的 "),s("code",[t._v("API")]),t._v("。")])]),t._v(" "),s("p",[s("code",[t._v("React-Redux")]),t._v(" 规定，所有的 "),s("code",[t._v("UI")]),t._v(" 组件都由用户提供，容器组件则是由 "),s("code",[t._v("React-Redux")]),t._v(" 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。")]),t._v(" "),s("p",[s("code",[t._v("React-Redux")]),t._v(" 规定，所有的 "),s("code",[t._v("UI")]),t._v(" 组件都由用户提供，容器组件则是由 "),s("code",[t._v("React-Redux")]),t._v(" 自动生成。也就是说，用户负责视觉层，状态管理则是全部交给它。")]),t._v(" "),s("h3",{attrs:{id:"connect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" "),s("strong",[t._v("connect()")])]),t._v(" "),s("div",{staticClass:"language-jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-jsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" connect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-redux'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" VisibleTodoList "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mapDispatchToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TodoList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面 "),s("code",[t._v("VisibleTodoList")]),t._v(" 便是 "),s("code",[t._v("UI")]),t._v(" 组件 "),s("code",[t._v("TodoList")]),t._v(" 通过 "),s("code",[t._v("connect")]),t._v(" 方法自动生成的容器组件。")]),t._v(" "),s("p",[s("code",[t._v("connect")]),t._v(" 方法接受两个参数："),s("code",[t._v("mapStateToProps")]),t._v(" 和 "),s("code",[t._v("mapDispatchToProps")]),t._v("。它们定义了 "),s("code",[t._v("UI")]),t._v(" 组件的业务逻辑。前者负责输入逻辑，即将 "),s("code",[t._v("state")]),t._v(" 映射到 "),s("code",[t._v("UI")]),t._v(" 组件的参数 "),s("code",[t._v("props")]),t._v("，后者负责输出逻辑，即将用户对 "),s("code",[t._v("UI")]),t._v(" 组件的操作映射成 "),s("code",[t._v("Action")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("mapStateToProps()")])]),t._v(" "),s("p",[s("code",[t._v("mapStateToProps")]),t._v(" 是一个函数，它接受 "),s("code",[t._v("state")]),t._v(" 作为参数，返回一个对象。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapStateToProps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("mapStateToProps")]),t._v(" 建立一个从（外部的）"),s("code",[t._v("state")]),t._v(" 对象到（"),s("code",[t._v("UI")]),t._v(" 组件的）"),s("code",[t._v("props")]),t._v(" 对象的映射关系。执行后应该返回一个对象，里面的每一个键值对就是一个映射。")]),t._v(" "),s("p",[s("strong",[t._v("mapDispatchToProps()")])]),t._v(" "),s("p",[s("code",[t._v("mapDispatchToProps")]),t._v(" 用来建立 "),s("code",[t._v("UI")]),t._v(" 组件的参数到 "),s("code",[t._v("store.dispatch")]),t._v(" 方法的映射。它定义了哪些用户的操作应该当作 "),s("code",[t._v("Action")]),t._v("，传给 "),s("code",[t._v("Store")]),t._v("。它可以是一个函数，也可以是一个对象。")]),t._v(" "),s("ul",[s("li",[t._v("是函数则会得到 "),s("code",[t._v("dispatch")]),t._v(" 和 "),s("code",[t._v("ownProps")]),t._v("（容器组件的 "),s("code",[t._v("props")]),t._v(" 对象）两个参数。")])]),t._v(" "),s("div",{staticClass:"language-tsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tsx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("mapDispatchToProps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dispatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ownProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onClick")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SET_VISIBILITY_FILTER'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        filter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ownProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"provider-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#provider-组件"}},[t._v("#")]),t._v(" Provider 组件")]),t._v(" "),s("p",[s("code",[t._v("connect")]),t._v(" 方法生成容器组件以后，需要让容器组件拿到 "),s("code",[t._v("state")]),t._v(" 对象，才能生成 "),s("code",[t._v("UI")]),t._v(" 组件的参数。\n"),s("code",[t._v("React-Redux")]),t._v(" 提供 "),s("code",[t._v("Provider")]),t._v(" 组件，使整个 "),s("code",[t._v("app")]),t._v(" 访问到 "),s("code",[t._v("Redux store")]),t._v(" 中的数据 即"),s("code",[t._v("state")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入口文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ReactDOM "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-dom'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./store'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Provider "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-redux'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" App "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./App'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用provider保存store")]),t._v("\nReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Provider store"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("App "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Provider"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#root'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);