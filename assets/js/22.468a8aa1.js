(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{292:function(t,e,s){"use strict";s.r(e);var a=s(13),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"vue双向绑定的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue双向绑定的原理"}},[t._v("#")]),t._v(" Vue双向绑定的原理")]),t._v(" "),e("h2",{attrs:{id:"一、在讲vue双向绑定之前我们需要来了解下mvvm模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、在讲vue双向绑定之前我们需要来了解下mvvm模式"}},[t._v("#")]),t._v(" 一、在讲vue双向绑定之前我们需要来了解下"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//so.csdn.net/so/search%3Fq%3DMVVM%26spm%3D1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("MVVM"),e("OutboundLink")],1),t._v("模式")]),t._v(" "),e("p",[t._v("MVVM（"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//so.csdn.net/so/search%3Fq%3DModel%26spm%3D1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("Model"),e("OutboundLink")],1),t._v("-View-ViewModel）是对 MVC（Model-View-Control）和 MVP（Model-View-Presenter）的进一步改进。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" View：视图层（"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UI")]),t._v(" 用户界面）\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ViewModel：业务逻辑层（一切 js 可视为业务逻辑，也就是前端的日常工作）\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Model：数据层（存储数据及对数据的处理如增删改查） "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" data\n")])])]),e("p",[t._v("MVVM 将数据双向绑定（data-binding）作为核心思想，View 和 Model 之间没有联系，它们通过 ViewModel\n这个桥梁进行交互\nModel 和 ViewModel 之间的交互是双向的，因此 View 的变化会自动同步到 Model，而 Model的变化也会立即反映到 View 上显示当用户操作 View，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model 发生改变，ViewModel也能感知到变化，使 View 作出相应更新")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-c528067d58265ea8beb917421ad3e69d_720w.webp",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"双向绑定的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定的原理"}},[t._v("#")]),t._v(" "),e("strong",[t._v("双向绑定的原理：")])]),t._v(" "),e("p",[t._v("“vue数据的双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。其核心就是通过Object.defineProperty()方法设置set和get函数来实现数据的劫持,在数据变化时发布消息给订阅者,触发相应的监听回调。也就是说数据和视图同步,数据发生变化,视图跟着变化,视图变化,数据也随之发生改变")]),t._v(" "),e("h2",{attrs:{id:"双向绑定的核心-object-defineproperty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定的核心-object-defineproperty"}},[t._v("#")]),t._v(" 双向绑定的核心： Object.defineProperty()")]),t._v(" "),e("p",[t._v("Object.defineProperty(obj, prop, descriptor) 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象\nObject.defineProperty(obj, prop, descriptor)")]),t._v(" "),e("ul",[e("li",[t._v("obj\n"),e("ul",[e("li",[t._v("要处理的目标对象")])])]),t._v(" "),e("li",[t._v("prop\n"),e("ul",[e("li",[t._v("要定义或修改的属性的名称")])])]),t._v(" "),e("li",[t._v("descriptor\n"),e("ul",[e("li",[t._v("将被定义或修改的属性描述符")])])])]),t._v(" "),e("p",[t._v("使用方法")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hunger'")]),t._v("\nobj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'intro'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name: 'WonYves', age: 3, intro: 'hello world'}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);